incarnation: protelis

variables:
  seed: &seed
    min: 0
    max: 99
    step: 1
    default: 0
  diameter: &diameter
    type: ArbitraryVariable
    parameters: [50, [5, 7, 10, 15, 20, 30, 50, 70, 100, 150, 200, 300, 500]]
  height: &height
    formula: 6.28318
  diameterBound: &diameterBound
    formula: 3 * diameter
  xstart: &xstart
    formula: 0 - diameter / 2
  ystart: &ystart
    formula: 0 - height / 2
  density: &density
    formula: 10
  commRange: &commRange
    formula: 1
  nodeCount: &nodeCount
    formula: diameter * density * 2 # 2 == height / commRange / commRange / PI
  log2m: &log2m
    formula: 7
  regsize: &regsize
    formula: 4
  stepsCheck: &stepsCheck
    formula: 3 * nodeCount
  maxtime: &maxtime
    formula: diameter * 10

seeds:
  simulation: *seed
  scenario: *seed

network-model:
  type: ConnectWithinDistance
  parameters: [*commRange]

export:
  - time
  - molecule: "error-central"
    value-filter: onlyfinite
    aggregators: [sum]
  - molecule: "error-extreme"
    value-filter: onlyfinite
    aggregators: [sum]
  - molecule: "error-random"
    value-filter: onlyfinite
    aggregators: [sum]
  - molecule: "error-pageRank"
    value-filter: onlyfinite
    aggregators: [sum]
  - molecule: "error-harmonic"
    value-filter: onlyfinite
    aggregators: [sum]
  - molecule: "error-closeness"
    value-filter: onlyfinite
    aggregators: [sum]
  - molecule: "error-degree"
    value-filter: onlyfinite
    aggregators: [sum]

converge: &converge
  - time-distribution: 1
    # Writing Protelis programs within a YAML file is a bad experience
    # (some characters need escaping, no syntax highlight, no code suggestions...)
    # We recommend using the Protelis Eclipse plugin to write your code, then
    # Loading the code as a module within Alchemist
    # In order to run this example, make sure that src/main/protelis is part of
    # your classpath (the Gradle script is already properly configured).
    program: org:protelis:convergeExperiment
  - program: send

contents: &contents
  - molecule: diameter
    concentration: *diameterBound
  - molecule: nodes
    concentration: *nodeCount
  - molecule: regsize
    concentration: *regsize
  - molecule: log2m
    concentration: *log2m

displacements:
  - in:                                         # central
      type: Point
      parameters: [0, 0]
    programs:
      - *converge
    contents: *contents
  - in:                                         # extremal
      type: Point
      parameters: [*xstart,  *ystart]
    programs:
      - *converge
    contents: *contents
  - in:
      type: Rectangle
      parameters: [*nodeCount, *xstart, *ystart, *diameter, *height]
    programs:
      - *converge
    contents: *contents

terminate:
  - type: StableForSteps
    parameters: [*stepsCheck, 3]
  - type: AfterTime
    parameters: [*maxtime]
