incarnation: protelis

variables:
  seed: &seed
    min: 0
    max: 100
    step: 1
    default: 0
  nodeCount: &nodeCount
# 2000 ~ 10*60 ~ 600
# 1000 ~ 3*60 ~ 180
# 500 ~ 60
    type: ArbitraryVariable
    parameters: [500, [10, 20, 50, 100, 200, 500, 1000, 2000, 5000]]
  groupCount: &groupCount
    formula: nodeCount - 1
  meanNeighbors:
    type: ArbitraryVariable
    parameters: [10, [2, 3, 5, 7, 10]]
  commRange: &commRange
    formula: 500 * Math.sqrt(meanNeighbors / Math.PI / nodeCount)
  speed: &speed
    type: ArbitraryVariable
    parameters: [10, [0, 1, 2, 5, 10]]
  log2m: &log2m
    formula: 11
  regsize: &regsize
    formula: 5
  stepsCheck: &stepsCheck
    formula: 3 * nodeCount
  samplingRate: &samplingRate
    formula: 2

seeds:
  simulation: *seed
  scenario: *seed

environment:
  type: ImageEnvironment
  parameters: [square.png]

network-model:
  type: ConnectWithinDistance
  parameters: [*commRange]

export:
  - time
  - type: NumberOfNodes
  - molecule: "org:protelis:armonicCentralityHLL"
    value-filter: onlyfinite
    aggregators: [mean]
  - molecule: "harmonicCentrality"
    value-filter: onlyfinite
    aggregators: [mean]
  - molecule: harmonicCentrality
    property: |
      // msqer
      sqrt((optionally(<value>).orElse(0) - env.get("org:protelis:armonicCentralityHLL", 0)) ^ 2)
    value-filter: onlyfinite
    aggregators: [mean, max, min, standarddeviation]

hyperanf: &hyperanf
  - time-distribution: 1
    # Writing Protelis programs within a YAML file is a bad experience
    # (some characters need escaping, no syntax highlight, no code suggestions...)
    # We recommend using the Protelis Eclipse plugin to write your code, then
    # Loading the code as a module within Alchemist
    # In order to run this example, make sure that src/main/protelis is part of
    # your classpath (the Gradle script is already properly configured).
    program: org:protelis:armonicCentralityHLL
  - program: send

harmonicOracle: &harmonicOracle
  - type: ChemicalReaction
    actions:
      - type: ComputeHarmonicCentrality
    conditions:
      - type: NeighborhoodChanged
        parameters: [true]

move: &move
  - time-distribution:
      type: ExponentialTime
      parameters: [1]
    type: Event
    actions:
      - type: LevyWalk
        parameters: [*speed, 50, 1]

staticOracle: &staticOracle
  - time-distribution:
      type: DiracComb
      parameters: [*samplingRate]
    program: "import it.unibo.hll.HarmonicCentrality.* recomputeHarmonicCentrality()"

displacements:
  - in:
      type: Rectangle
      parameters: [1, 1, 1, 498, 498]
    programs:
      - *hyperanf
      - *staticOracle
      - *move
  - in:
      type: Rectangle
      parameters: [*groupCount, 1, 1, 498, 498]
    programs:
      - *hyperanf
#      - *harmonicOracle
      - *move
    contents:
      - molecule: regsize
        concentration: *regsize
      - molecule: log2m
        concentration: *log2m

terminate:
  - type: StableForSteps
    parameters: [*stepsCheck, 3]
  - type: AfterTime
    parameters: [50]